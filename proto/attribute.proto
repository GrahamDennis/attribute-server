syntax = "proto3";

package me.grahamdennis.attribute;

import "google/protobuf/descriptor.proto";

message AttributeTypeOptions {
  bool create_attribute_type = 1;
}
extend google.protobuf.MessageOptions {
  optional AttributeTypeOptions attribute_type_options = 50000;
}

service AttributeStore {
  rpc Ping(PingRequest) returns (PingResponse);

  rpc CreateAttributeType(CreateAttributeTypeRequest) returns (CreateAttributeTypeResponse);
  rpc GetEntity(GetEntityRequest) returns (GetEntityResponse);
  rpc QueryEntityRows(QueryEntityRowsRequest) returns (QueryEntityRowsResponse);
  rpc UpdateEntity(UpdateEntityRequest) returns (UpdateEntityResponse);
  rpc WatchEntities(WatchEntitiesRequest) returns (stream WatchEntitiesEvent);
  rpc WatchEntityRows(WatchEntityRowsRequest) returns (stream WatchEntityRowsEvent);
}

message PingRequest {}
message PingResponse {}

enum ValueType {
  INVALID = 0;
  TEXT = 1;
  ENTITY_REFERENCE = 2;
  BYTES = 3;
}

message CreateAttributeTypeRequest {
  AttributeType attribute_type = 1;
}

message AttributeType {
  string symbol = 1;
  ValueType value_type = 2;
  // FIXME: more information will be required, e.g.:
  //   * uniqueness
  //   * ownership / read/write permissions
}

message CreateAttributeTypeResponse {
  Entity entity = 1;
}

message GetEntityRequest {
  EntityLocator entity_locator = 1;
}

message GetEntityResponse {
  Entity entity = 1;
}

message QueryEntityRowsRequest {
  EntityQueryNode root = 1;
  repeated string attribute_types = 2;
}

message QueryEntityRowsResponse {
  repeated EntityRow rows = 1;
}

message EntityLocator {
  oneof locator {
    string entity_id = 1;
    string symbol = 2;
  }
}

message Entity {
  string entity_id = 1;
  string entity_version = 2;
  map<string, AttributeValue> attributes = 3;
}

message EntityRow {
  repeated NullableAttributeValue values = 1;
}

message AttributeValue {
  oneof attribute_value {
    string string_value = 1;
    string entity_id_value = 2;
    bytes bytes_value = 3;
  }
}

message NullableAttributeValue {
  optional AttributeValue value = 1;
}

message EntityQueryNode {
  oneof query {
    MatchAllQueryNode match_all = 1;
    MatchNoneQueryNode match_none = 2;
    AndQueryNode and_ = 3;
    OrQueryNode or_ = 4;
    HasAttributeTypesNode has_attribute_types = 5;
//    MatchEntityIdQueryNode match_entity_id = 5;
//    MatchSymbolQueryNode match_symbol = 6;
//    MatchAttributeValueQueryNode match_attribute_value = 7;
  }
}

message MatchAllQueryNode {}
message MatchNoneQueryNode {}
message AndQueryNode {
  repeated EntityQueryNode clauses = 1;
}

message OrQueryNode {
  repeated EntityQueryNode clauses = 1;
}

message HasAttributeTypesNode {
  repeated string attribute_types = 1;
}

message UpdateEntityRequest {
  EntityLocator entity_locator = 1;
  repeated AttributeToUpdate attributes_to_update = 2;
  // FIXME: Could this be made conditional like a compare-and-swap?
  // Does this mean we need entity versions?
}

message AttributeToUpdate {
  string attribute_type = 1;
  optional AttributeValue attribute_value = 2;
}

message UpdateEntityResponse {
  Entity entity = 1;
}

message WatchEntitiesRequest {
  EntityQueryNode query = 1;
  // Send initial events, and then a bookmark event
  bool send_initial_events = 2;
}

message WatchEntityRowsRequest {
  EntityQueryNode query = 1;
  repeated string attribute_types = 2;
  // Send initial events, and then a bookmark event
  bool send_initial_events = 3;
}

message WatchEntitiesEvent {
  oneof event {
    AddedEvent added = 1;
    ModifiedEvent modified = 2;
    RemovedEvent removed = 3;
    BookmarkEvent bookmark = 4;
  }
}

message AddedEvent {
  Entity entity = 1;
}

message ModifiedEvent {
  // The current state of the entity
  Entity entity = 1;
}

message RemovedEvent {
  // The state of the entity prior to it being removed
  Entity entity = 1;
}

// FIXME: although the name of this event is inspired by the kubernetes event name, I don't like it.
message BookmarkEvent {
  string entity_version = 1;
}

message WatchEntityRowsEvent {
  oneof event {
    AddedEntityRowEvent added = 1;
    ModifiedEntityRowEvent modified = 2;
    RemovedEntityRowEvent removed = 3;
    BookmarkEvent bookmark = 4;
  }
}

message AddedEntityRowEvent {
  EntityRow entity_row = 1;
}

message ModifiedEntityRowEvent {
  EntityRow entity_row = 1;
}

message RemovedEntityRowEvent {
  EntityRow entity_row = 1;
}
